name: Build OpenWrt Image with Passwall

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab
  # push:
  #   branches:
  #     - main # Or your preferred branch

jobs:
  build_openwrt_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc \
            rsync wget unzip ca-certificates curl jq

      - name: Get Latest OpenWrt ImageBuilder SDK URL
        id: openwrt_sdk
        run: |
          LATEST_STABLE_VERSION=$(curl -s https://downloads.openwrt.org/releases/ | grep -oP 'href="\K[0-9]+\.[0-9]+\.[0-9]+(?=/")' | sort -V | tail -n1)
          echo "Latest OpenWrt stable version: $LATEST_STABLE_VERSION"
          SDK_URL_PRIMARY="https://downloads.openwrt.org/releases/${LATEST_STABLE_VERSION}/targets/x86/64/openwrt-imagebuilder-${LATEST_STABLE_VERSION}-x86-64.Linux-x86_64.tar.zst"
          
          # Check if the primary SDK URL is valid
          if curl --output /dev/null --silent --head --fail "$SDK_URL_PRIMARY"; then
            echo "SDK_URL=$SDK_URL_PRIMARY" >> $GITHUB_OUTPUT
            echo "Using SDK URL: $SDK_URL_PRIMARY"
          else
            echo "Primary SDK URL ($SDK_URL_PRIMARY) not found. Attempting to find SDK file in directory listing..."
            SDK_DIR_URL="https://downloads.openwrt.org/releases/${LATEST_STABLE_VERSION}/targets/x86/64/"
            SDK_FILENAME=$(curl -s "$SDK_DIR_URL" | grep -oP 'openwrt-imagebuilder-'"${LATEST_STABLE_VERSION}"'-x86-64\.Linux-x86_64\.tar\.zst' | head -n1)
            if [ -z "$SDK_FILENAME" ]; then
              echo "::error::Could not find ImageBuilder SDK for version ${LATEST_STABLE_VERSION} on x86/64 target."
              exit 1
            fi
            SDK_URL_FALLBACK="${SDK_DIR_URL}${SDK_FILENAME}"
            echo "SDK_URL=$SDK_URL_FALLBACK" >> $GITHUB_OUTPUT
            echo "Found SDK URL: $SDK_URL_FALLBACK"
          fi

      - name: Download and Extract OpenWrt ImageBuilder
        run: |
          IMAGEBUILDER_DIR="openwrt_imagebuilder"
          mkdir "$IMAGEBUILDER_DIR"
          echo "Downloading ImageBuilder SDK from ${{ steps.openwrt_sdk.outputs.SDK_URL }}"
          wget -qO openwrt-imagebuilder.tar.zst "${{ steps.openwrt_sdk.outputs.SDK_URL }}"
          tar -xf openwrt-imagebuilder.tar.zst -C "$IMAGEBUILDER_DIR" --strip-components=1
          echo "IMAGEBUILDER_PATH=${GITHUB_WORKSPACE}/${IMAGEBUILDER_DIR}" >> $GITHUB_ENV
          echo "ImageBuilder extracted to ${{ env.IMAGEBUILDER_PATH }}"

      - name: Get Latest Passwall Release Information
        id: passwall_release
        run: |
          RELEASE_INFO_URL="https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest"
          echo "Fetching latest Passwall release info from $RELEASE_INFO_URL"
          
          LUCI_APP_URL=$(curl -s $RELEASE_INFO_URL | jq -r '.assets[] | select(.name | test("^luci-app-passwall_.*\\.ipk$")) | .browser_download_url' | head -n1)
          LUCI_I18N_URL=$(curl -s $RELEASE_INFO_URL | jq -r '.assets[] | select(.name | test("^luci-i18n-passwall-zh-cn_.*\\.ipk$")) | .browser_download_url' | head -n1)
          PACKAGES_ZIP_URL=$(curl -s $RELEASE_INFO_URL | jq -r '.assets[] | select(.name == "passwall_packages_ipk_x86_64.zip") | .browser_download_url' | head -n1)

          if [ -z "$LUCI_APP_URL" ] || [ "$LUCI_APP_URL" == "null" ]; then echo "::error::Could not find luci-app-passwall IPK URL."; exit 1; fi
          if [ -z "$LUCI_I18N_URL" ] || [ "$LUCI_I18N_URL" == "null" ]; then echo "::error::Could not find luci-i18n-passwall-zh-cn IPK URL."; exit 1; fi
          if [ -z "$PACKAGES_ZIP_URL" ] || [ "$PACKAGES_ZIP_URL" == "null" ]; then echo "::error::Could not find passwall_packages_ipk_x86_64.zip URL."; exit 1; fi

          echo "LUCI_APP_URL=$LUCI_APP_URL" >> $GITHUB_OUTPUT
          echo "LUCI_I18N_URL=$LUCI_I18N_URL" >> $GITHUB_OUTPUT
          echo "PACKAGES_ZIP_URL=$PACKAGES_ZIP_URL" >> $GITHUB_OUTPUT
          
          echo "Found Passwall luci-app URL: $LUCI_APP_URL"
          echo "Found Passwall luci-i18n URL: $LUCI_I18N_URL"
          echo "Found Passwall packages_zip URL: $PACKAGES_ZIP_URL"

      - name: Download and Place Passwall IPK Files
        run: |
          PACKAGE_DIR="${{ env.IMAGEBUILDER_PATH }}/packages"
          mkdir -p "$PACKAGE_DIR"
          TEMP_IPK_DIR="${GITHUB_WORKSPACE}/temp_ipk_download"
          mkdir -p "$TEMP_IPK_DIR"

          echo "Downloading luci-app-passwall..."
          wget -qO "${TEMP_IPK_DIR}/luci-app-passwall.ipk" "${{ steps.passwall_release.outputs.LUCI_APP_URL }}"
          echo "Downloading luci-i18n-passwall-zh-cn..."
          wget -qO "${TEMP_IPK_DIR}/luci-i18n-passwall-zh-cn.ipk" "${{ steps.passwall_release.outputs.LUCI_I18N_URL }}"
          echo "Downloading Passwall packages zip..."
          wget -qO "${TEMP_IPK_DIR}/passwall_packages.zip" "${{ steps.passwall_release.outputs.PACKAGES_ZIP_URL }}"

          TEMP_UNZIP_DIR="${TEMP_IPK_DIR}/unzipped_packages"
          mkdir -p "$TEMP_UNZIP_DIR"
          unzip -o "${TEMP_IPK_DIR}/passwall_packages.zip" -d "$TEMP_UNZIP_DIR"

          cp "${TEMP_IPK_DIR}/luci-app-passwall.ipk" "$PACKAGE_DIR/"
          cp "${TEMP_IPK_DIR}/luci-i18n-passwall-zh-cn.ipk" "$PACKAGE_DIR/"

          # IPKs to extract from the zip (geoview is not typically a standalone IPK here)
          IPKS_FROM_ZIP=(
            "chinadns-ng"
            "dns2socks"
            "microsocks"
            "tcping"
            "xray-core"
            "xray-plugin"
          )
          for pkg_prefix in "${IPKS_FROM_ZIP[@]}"; do
            find "$TEMP_UNZIP_DIR" -name "${pkg_prefix}*.ipk" -exec cp {} "$PACKAGE_DIR/" \;
          done
          
          echo "Contents of $PACKAGE_DIR:"
          ls -l "$PACKAGE_DIR"

          # Verify required IPKs are present
          # Note: luci-app-passwall.ipk and luci-i18n-passwall-zh-cn.ipk are specific names after download
          REQUIRED_IPK_PREFIXES=(
            "luci-app-passwall.ipk" # Exact name
            "luci-i18n-passwall-zh-cn.ipk" # Exact name
            "chinadns-ng"
            "dns2socks"
            "microsocks"
            "tcping"
            "xray-core"
            "xray-plugin"
          )
          for PKG_NAME_OR_PREFIX in "${REQUIRED_IPK_PREFIXES[@]}"; do
            if ! ls "$PACKAGE_DIR/${PKG_NAME_OR_PREFIX}"* 1> /dev/null 2>&1 && ! ls "$PACKAGE_DIR/${PKG_NAME_OR_PREFIX}" 1> /dev/null 2>&1; then
              echo "::error::Required IPK matching '${PKG_NAME_OR_PREFIX}' not found in $PACKAGE_DIR."
              echo "Files found in ${TEMP_UNZIP_DIR} for prefix ${PKG_NAME_OR_PREFIX}:"
              find "$TEMP_UNZIP_DIR" -name "${PKG_NAME_OR_PREFIX}*.ipk"
              exit 1
            fi
          done
          echo "All required IPKs seem to be in place."
          rm -rf "$TEMP_IPK_DIR"

      - name: Modify ImageBuilder .config File
        working-directory: ${{ env.IMAGEBUILDER_PATH }}
        run: |
          CONFIG_FILE=".config"
          # Create a .config file if it doesn't exist.
          # Note: ImageBuilder doesn't typically use a root .config for KERNEL_PARTSIZE/ROOTFS_PARTSIZE.
          # These are more reliably set via 'make' arguments or profile definitions.
          # This step fulfills the prompt's requirement to modify/create this file.
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "# .config file created by GitHub Actions workflow" > "$CONFIG_FILE"
            # You might need to add profile selection here if ImageBuilder requires it in .config
            # e.g., echo "CONFIG_PROFILE_GENERIC=y" >> .config (syntax depends on ImageBuilder version)
          fi

          echo "Modifying $CONFIG_FILE to set partition sizes..."
          if grep -q "CONFIG_TARGET_KERNEL_PARTSIZE=" "$CONFIG_FILE"; then
            sed -i 's/.*CONFIG_TARGET_KERNEL_PARTSIZE=.*/CONFIG_TARGET_KERNEL_PARTSIZE=32/' "$CONFIG_FILE"
          else
            echo "CONFIG_TARGET_KERNEL_PARTSIZE=32" >> "$CONFIG_FILE"
          fi
          if grep -q "CONFIG_TARGET_ROOTFS_PARTSIZE=" "$CONFIG_FILE"; then
            sed -i 's/.*CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=256/' "$CONFIG_FILE"
          else
            echo "CONFIG_TARGET_ROOTFS_PARTSIZE=256" >> "$CONFIG_FILE"
          fi
          echo "Contents of $CONFIG_FILE after modification:"
          cat "$CONFIG_FILE"

      - name: Build OpenWrt Image
        id: build_image
        working-directory: ${{ env.IMAGEBUILDER_PATH }}
        run: |
          # The PACKAGES list. 'geoview' removed as it's not a typical IPK from the zip.
          # The partition sizes are passed as make arguments for reliability with ImageBuilder.
          echo "Starting image build..."
          make image \
            PROFILE="generic" \
            PACKAGES="dnsmasq-full chinadns-ng dns2socks microsocks tcping xray-core xray-plugin luci-app-passwall luci-i18n-passwall-zh-cn kmod-nft-nat kmod-nft-socket kmod-nft-tproxy htop keepalived luci luci-compat luci-i18n-base-zh-cn qemu-ga inotifywait luci-app-keepalived -dnsmasq" \
            KERNEL_PARTSIZE=32 \
            ROOTFS_PARTSIZE=256

          echo "BUILD_OUTPUT_PATH=${{ env.IMAGEBUILDER_PATH }}/bin/targets/x86/64" >> $GITHUB_OUTPUT
          echo "Image build complete. Output files are in ${{ env.IMAGEBUILDER_PATH }}/bin/targets/x86/64/"
          echo "Listing contents of output directory:"
          ls -R "${{ env.IMAGEBUILDER_PATH }}/bin/"

      - name: Create Release Tag
        id: create_tag
        run: |
          RELEASE_TAG="openwrt-image-$(date +'%Y-%m-%d-%H%M%S')"
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated release tag: ${RELEASE_TAG}"

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.RELEASE_TAG }}
          name: OpenWrt Build ${{ steps.create_tag.outputs.RELEASE_TAG }}
          body: |
            OpenWrt image built on $(date +'%Y-%m-%d %H:%M:%S UTC').
            Profile: generic (x86/64)
            ImageBuilder Version: SDK for OpenWrt ${{ steps.openwrt_sdk.outputs.LATEST_STABLE_VERSION }} (approx)
            Custom IPKs included from xiaorouji/openwrt-passwall (latest).
            Kernel Partition Size: 32MB
            RootFS Partition Size: 256MB
          draft: false
          prerelease: false
          files: |
            ${{ steps.build_image.outputs.BUILD_OUTPUT_PATH }}/*
