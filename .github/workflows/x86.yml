name: Build OpenWrt x86 Image with Selected Packages

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build_openwrt_image:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create_tag.outputs.RELEASE_TAG }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc \
            rsync wget unzip ca-certificates curl jq zstd

      - name: Get Latest OpenWrt ImageBuilder SDK URL
        id: openwrt_sdk
        run: |
          LATEST_STABLE_VERSION=$(curl -s https://downloads.openwrt.org/releases/ | grep -oP 'href="\K[0-9]+\.[0-9]+\.[0-9]+(?=/")' | sort -V | tail -n1)
          echo "Latest OpenWrt stable version: $LATEST_STABLE_VERSION"
          echo "LATEST_STABLE_VERSION=$LATEST_STABLE_VERSION" >> $GITHUB_OUTPUT
          
          SDK_URL_PRIMARY="https://downloads.openwrt.org/releases/${LATEST_STABLE_VERSION}/targets/x86/64/openwrt-imagebuilder-${LATEST_STABLE_VERSION}-x86-64.Linux-x86_64.tar.zst"
          
          if curl --output /dev/null --silent --head --fail "$SDK_URL_PRIMARY"; then
            echo "SDK_URL=$SDK_URL_PRIMARY" >> $GITHUB_OUTPUT
            echo "Using SDK URL: $SDK_URL_PRIMARY"
          else
            echo "Primary SDK URL ($SDK_URL_PRIMARY) not found. Attempting to find SDK file in directory listing..."
            SDK_DIR_URL="https://downloads.openwrt.org/releases/${LATEST_STABLE_VERSION}/targets/x86/64/"
            SDK_FILENAME=$(curl -s "$SDK_DIR_URL" | grep -oP 'openwrt-imagebuilder-'"${LATEST_STABLE_VERSION}"'-x86-64\.Linux-x86_64\.tar\.zst' | head -n1)
            if [ -z "$SDK_FILENAME" ]; then
              echo "::error::Could not find ImageBuilder SDK (tar.zst) for version ${LATEST_STABLE_VERSION} on x86/64 target."
              exit 1
            fi
            SDK_URL_FALLBACK="${SDK_DIR_URL}${SDK_FILENAME}"
            echo "SDK_URL=$SDK_URL_FALLBACK" >> $GITHUB_OUTPUT
            echo "Found SDK URL: $SDK_URL_FALLBACK"
          fi

      - name: Download and Extract OpenWrt ImageBuilder
        run: |
          IMAGEBUILDER_DIR_NAME="openwrt_imagebuilder"
          IMAGEBUILDER_FULL_PATH="${GITHUB_WORKSPACE}/${IMAGEBUILDER_DIR_NAME}"
          mkdir "$IMAGEBUILDER_FULL_PATH"
          
          echo "Downloading ImageBuilder SDK from ${{ steps.openwrt_sdk.outputs.SDK_URL }}"
          wget -qO openwrt-imagebuilder.tar.zst "${{ steps.openwrt_sdk.outputs.SDK_URL }}"
          
          echo "Extracting ImageBuilder..."
          tar --zstd -xf openwrt-imagebuilder.tar.zst -C "$IMAGEBUILDER_FULL_PATH" --strip-components=1
          
          echo "IMAGEBUILDER_PATH=${IMAGEBUILDER_FULL_PATH}" >> $GITHUB_ENV
          echo "ImageBuilder extracted to ${IMAGEBUILDER_FULL_PATH}"

      - name: Get Latest Passwall Release Information
        id: passwall_release
        run: |
          RELEASE_INFO_URL="https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest"
          echo "Fetching latest Passwall release info from $RELEASE_INFO_URL"
          
          LUCI_APP_URL=$(curl -s $RELEASE_INFO_URL | jq -r '.assets[] | select(.name | test(".*luci-app-passwall_.*\\.ipk$")) | .browser_download_url' | head -n1)
          LUCI_I18N_URL=$(curl -s $RELEASE_INFO_URL | jq -r '.assets[] | select(.name | test(".*luci-i18n-passwall-zh-cn_.*\\.ipk$")) | .browser_download_url' | head -n1)
          PACKAGES_ZIP_URL=$(curl -s $RELEASE_INFO_URL | jq -r '.assets[] | select(.name == "passwall_packages_ipk_x86_64.zip") | .browser_download_url' | head -n1)

          if [ -z "$LUCI_APP_URL" ] || [ "$LUCI_APP_URL" == "null" ]; then echo "::error::Could not find luci-app-passwall IPK URL."; exit 1; fi
          if [ -z "$LUCI_I18N_URL" ] || [ "$LUCI_I18N_URL" == "null" ]; then echo "::error::Could not find luci-i18n-passwall-zh-cn IPK URL."; exit 1; fi
          if [ -z "$PACKAGES_ZIP_URL" ] || [ "$PACKAGES_ZIP_URL" == "null" ]; then echo "::error::Could not find passwall_packages_ipk_x86_64.zip URL."; exit 1; fi

          echo "LUCI_APP_URL=$LUCI_APP_URL" >> $GITHUB_OUTPUT
          echo "LUCI_I18N_URL=$LUCI_I18N_URL" >> $GITHUB_OUTPUT
          echo "PACKAGES_ZIP_URL=$PACKAGES_ZIP_URL" >> $GITHUB_OUTPUT

      - name: Download and Place Passwall IPK Files
        run: |
          PACKAGE_DIR="${{ env.IMAGEBUILDER_PATH }}/packages"
          mkdir -p "$PACKAGE_DIR"
          TEMP_IPK_DIR="${GITHUB_WORKSPACE}/temp_ipk_download"
          mkdir -p "$TEMP_IPK_DIR"

          echo "Downloading luci-app-passwall..."
          wget -qO "${TEMP_IPK_DIR}/luci-app-passwall.ipk" "${{ steps.passwall_release.outputs.LUCI_APP_URL }}"
          echo "Downloading luci-i18n-passwall-zh-cn..."
          wget -qO "${TEMP_IPK_DIR}/luci-i18n-passwall-zh-cn.ipk" "${{ steps.passwall_release.outputs.LUCI_I18N_URL }}"
          echo "Downloading Passwall packages zip..."
          wget -qO "${TEMP_IPK_DIR}/passwall_packages.zip" "${{ steps.passwall_release.outputs.PACKAGES_ZIP_URL }}"

          TEMP_UNZIP_DIR="${TEMP_IPK_DIR}/unzipped_packages"
          mkdir -p "$TEMP_UNZIP_DIR"
          unzip -o "${TEMP_IPK_DIR}/passwall_packages.zip" -d "$TEMP_UNZIP_DIR"

          cp "${TEMP_IPK_DIR}/luci-app-passwall.ipk" "$PACKAGE_DIR/"
          cp "${TEMP_IPK_DIR}/luci-i18n-passwall-zh-cn.ipk" "$PACKAGE_DIR/"
          
          echo "Copying all .ipk files from Passwall packages zip..."
          find "$TEMP_UNZIP_DIR" -name "*.ipk" -exec cp -v {} "$PACKAGE_DIR/" \;
          
          echo "Contents of $PACKAGE_DIR:"
          ls -l "$PACKAGE_DIR"

          DIRECT_DOWNLOAD_IPKS=("luci-app-passwall.ipk" "luci-i18n-passwall-zh-cn.ipk")
          for ipk_file in "${DIRECT_DOWNLOAD_IPKS[@]}"; do
            if [ ! -f "$PACKAGE_DIR/$ipk_file" ]; then
              echo "::error::Directly downloaded IPK '$ipk_file' not found in $PACKAGE_DIR."
              exit 1
            fi
          done
          
          zip_ipk_count=$(find "$PACKAGE_DIR" -name "*.ipk" ! -name "luci-app-passwall.ipk" ! -name "luci-i18n-passwall-zh-cn.ipk" -type f | wc -l)
          if [ "$zip_ipk_count" -eq 0 ]; then
             echo "::warning::No additional IPKs seem to have been copied from the Passwall packages zip to $PACKAGE_DIR (or only the two direct downloads were present)."
          else
             echo "Copied $zip_ipk_count additional IPKs from the Passwall packages zip."
          fi
          
          rm -rf "$TEMP_IPK_DIR"

      - name: Modify ImageBuilder .config File
        working-directory: ${{ env.IMAGEBUILDER_PATH }}
        run: |
          CONFIG_FILE=".config"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "# .config file created by GitHub Actions workflow" > "$CONFIG_FILE"
          fi
          echo "Modifying $CONFIG_FILE to set partition sizes..."
          if grep -q "CONFIG_TARGET_KERNEL_PARTSIZE=" "$CONFIG_FILE"; then
            sed -i 's/.*CONFIG_TARGET_KERNEL_PARTSIZE=.*/CONFIG_TARGET_KERNEL_PARTSIZE=32/' "$CONFIG_FILE"
          else
            echo "CONFIG_TARGET_KERNEL_PARTSIZE=32" >> "$CONFIG_FILE"
          fi
          if grep -q "CONFIG_TARGET_ROOTFS_PARTSIZE=" "$CONFIG_FILE"; then
            sed -i 's/.*CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=256/' "$CONFIG_FILE"
          else
            echo "CONFIG_TARGET_ROOTFS_PARTSIZE=256" >> "$CONFIG_FILE"
          fi

      - name: Build OpenWrt Image
        id: build_image
        working-directory: ${{ env.IMAGEBUILDER_PATH }}
        run: |
          echo "Starting image build..."
          make image \
            PROFILE="generic" \
            PACKAGES="dnsmasq-full chinadns-ng dns2socks microsocks tcping xray-core xray-plugin luci-app-passwall luci-i18n-passwall-zh-cn kmod-nft-nat kmod-nft-socket kmod-nft-tproxy htop keepalived luci luci-compat luci-i18n-base-zh-cn qemu-ga inotifywait luci-app-keepalived -dnsmasq" \
            KERNEL_PARTSIZE=32 \
            ROOTFS_PARTSIZE=256

          echo "BUILD_OUTPUT_PATH=${{ env.IMAGEBUILDER_PATH }}/bin/targets/x86/64" >> $GITHUB_OUTPUT
          echo "Image build complete. Output files are in ${{ env.IMAGEBUILDER_PATH }}/bin/targets/x86/64/"
          ls -R "${{ env.IMAGEBUILDER_PATH }}/bin/"

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          set -x # Enable command tracing for debugging.

          BUILD_DATE_STRING="$(date +'%Y-%m-%d %H:%M:%S UTC')"
          echo "DEBUG: BUILD_DATE_STRING: $BUILD_DATE_STRING"

          OPENWRT_SDK_VERSION="${{ steps.openwrt_sdk.outputs.LATEST_STABLE_VERSION }}"
          echo "DEBUG: OPENWRT_SDK_VERSION: $OPENWRT_SDK_VERSION"

          BUILD_OUTPUT_DIR="${{ steps.build_image.outputs.BUILD_OUTPUT_PATH }}"
          echo "DEBUG: Attempted BUILD_OUTPUT_DIR: '$BUILD_OUTPUT_DIR'"

          PACKAGE_LIST_CONTENT="N/A - Manifest file not found or empty." # Default value
          MANIFEST_FILE="" 

          if [ -n "$BUILD_OUTPUT_DIR" ] && [ -d "$BUILD_OUTPUT_DIR" ]; then
            MANIFEST_FILE=$(find "$BUILD_OUTPUT_DIR" -maxdepth 1 -name "*.manifest" -print -quit 2>/dev/null)
            if [ -n "$MANIFEST_FILE" ] && [ -f "$MANIFEST_FILE" ]; then
              echo "DEBUG: Found manifest file: '$MANIFEST_FILE'"
              RAW_PACKAGE_LIST=$(cat "$MANIFEST_FILE" || echo "Error reading manifest") 
              if [ "$RAW_PACKAGE_LIST" != "Error reading manifest" ] && [ -n "$RAW_PACKAGE_LIST" ]; then
                PACKAGE_LIST_CONTENT="$RAW_PACKAGE_LIST"
              elif [ "$RAW_PACKAGE_LIST" == "Error reading manifest" ]; then
                echo "::error::Failed to cat manifest file '$MANIFEST_FILE'"
                PACKAGE_LIST_CONTENT="Error reading manifest file."
              else
                echo "DEBUG: Manifest file '$MANIFEST_FILE' was empty."
                PACKAGE_LIST_CONTENT="N/A - Manifest file was empty."
              fi
            else
              echo "::warning::Manifest file not found or is not a regular file in '$BUILD_OUTPUT_DIR'."
            fi
          else
            echo "::warning::Build output directory '$BUILD_OUTPUT_DIR' not valid. Cannot search for manifest."
          fi
          
          # !!! ---- IMPORTANT DEBUGGING STEP ---- !!!
          # Uncomment the next line to test with a small placeholder for package list.
          # If the workflow succeeds with this, the issue is related to the actual $PACKAGE_LIST_CONTENT (size or characters).
          # PACKAGE_LIST_CONTENT="This is a short test package list."  # <<< --- UNCOMMENT THIS LINE FOR THE FIRST DEBUG RUN
          # !!! ---- END OF DEBUGGING STEP ---- !!!
          
          echo "DEBUG: Populating RELEASE_BODY_TEMPLATE..."
          read -r -d '' RELEASE_BODY_TEMPLATE <<EOF_RB_TPL
          OpenWrt image built on $BUILD_DATE_STRING.
          Profile: generic (x86/64)
          ImageBuilder Version: SDK for OpenWrt $OPENWRT_SDK_VERSION
          Custom IPKs included from xiaorouji/openwrt-passwall (latest) and all IPKs from passwall_packages_ipk_x86_64.zip.
          Kernel Partition Size: 32MB
          RootFS Partition Size: 256MB

          **Installed Packages and Versions (from manifest):**
          \`\`\`
          $PACKAGE_LIST_CONTENT
          \`\`\`
          EOF_RB_TPL
          
          echo "DEBUG: RELEASE_BODY_TEMPLATE has been populated."
          
          echo "DEBUG: Setting GITHUB_OUTPUT release_body..."
          FIXED_EOF_MARKER="END_OF_ACTION_OUTPUT_VAL_XYZ123" # Made slightly more unique
          
          if [ -z "$GITHUB_OUTPUT" ]; then
            echo "::error:: GITHUB_OUTPUT environment variable is not set."
            exit 1 
          fi
          
          {
            echo "release_body<<$FIXED_EOF_MARKER"
            printf "%s\n" "$RELEASE_BODY_TEMPLATE" 
            echo "$FIXED_EOF_MARKER"
          } >> "$GITHUB_OUTPUT"
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to write RELEASE_BODY_TEMPLATE to GITHUB_OUTPUT."
            exit 1 
          fi
          
          echo "DEBUG: Finished Generate Release Notes step successfully."

      - name: Create Release Tag
        id: create_tag
        run: |
          RELEASE_TAG="openwrt-image-$(date +'%Y-%m-%d-%H%M%S')"
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated release tag: ${RELEASE_TAG}"

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.RELEASE_TAG }}
          name: OpenWrt Build ${{ steps.create_tag.outputs.RELEASE_TAG }}
          body: ${{ steps.generate_release_notes.outputs.release_body }}
          draft: false
          prerelease: false
          files: |
            ${{ steps.build_image.outputs.BUILD_OUTPUT_PATH }}/*

  cleanup_releases:
    runs-on: ubuntu-latest
    needs: build_openwrt_image
    if: success() && github.event_name == 'workflow_dispatch' 
    steps:
      - name: Clean up old releases (keep last 10)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const releasesToKeep = 10;

            try {
              core.info(`Fetching releases for ${owner}/${repo}...`);
              const { data: allReleases } = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });
              
              const workflowReleases = allReleases.filter(r => r.name && r.name.startsWith("OpenWrt Build openwrt-image-"));
              core.info(`Found ${workflowReleases.length} releases matching workflow pattern out of ${allReleases.length} total releases.`);

              const sortedReleases = workflowReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

              if (sortedReleases.length > releasesToKeep) {
                const releasesToDelete = sortedReleases.slice(releasesToKeep);
                core.info(`Found ${releasesToDelete.length} old workflow releases to delete (keeping ${releasesToKeep}).`);
                for (const release of releasesToDelete) {
                  core.info(`Deleting release: "${release.name}" (ID: ${release.id}, Tag: ${release.tag_name}, Created: ${release.created_at})`);
                  try {
                    await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id });
                    core.info(`  Successfully deleted release: "${release.name}"`);
                    try {
                      await github.rest.git.deleteRef({ owner, repo, ref: `tags/${release.tag_name}` });
                      core.info(`  Successfully deleted tag: ${release.tag_name}`);
                    } catch (tagError) {
                      core.warning(`  Could not delete tag ${release.tag_name} (it might be already deleted or protected): ${tagError.message}`);
                    }
                  } catch (releaseError) {
                    core.error(`  Failed to delete release "${release.name}": ${releaseError.message}`);
                  }
                }
              } else {
                core.info("No old workflow releases to delete (total workflow releases less than or equal to threshold).");
              }
            } catch (error) {
              core.setFailed(`Failed to list or process releases: ${error.message}`);
            }
